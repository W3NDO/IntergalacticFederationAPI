require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/planets", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Planet. As you add validations to Planet, be sure to
  # adjust the attributes here as well.
  

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # PlanetsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }


  describe "GET /index" do
    it "renders a successful response" do
      get planets_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      planet = Planet.first
      get planet_url(planet), as: :json
      expect(response).to be_successful
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "andvari",
          resources_sent: 10,
          resources_received: 20
        }
      }
      let(:planet) {Planet.find_by(name: "andvari")}

      it "updates the requested planet" do
        patch planet_url(planet),
              params: { planet: new_attributes }, headers: valid_headers, as: :json
        planet.reload
        expect(planet.resources_received).to eq 20
      end

      it "renders a JSON response with the planet" do
        patch planet_url(planet),
              params: { planet: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let(:planet){Planet.find_by(name: "andvari")}
      it "renders a JSON response with errors for the planet" do
        patch planet_url(planet),
              params: { planet: {name: "andvari", resources_received: "cheese", resources_sent: "cake"} }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
